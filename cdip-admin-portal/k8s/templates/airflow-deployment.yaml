apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow
  namespace: "${KUBERNETES_NAMESPACE}"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: airflow
  template:
    metadata:
      labels:
        name: airflow
    spec:
      initContainers:
        - name: init-airflow
          image: "${AIRFLOW_IMAGE}"
          imagePullPolicy: Always
          command: ['sh', '-c', "airflow initdb"]
          volumeMounts:
            - name: airflow-configmap
              mountPath: /root/airflow/airflow.cfg
              subPath: airflow.cfg
          env:
            # TODO: read conn str as a secret
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              value: "${AIRFLOW_METADB_CONN_STR}"
      containers:
        - name: webserver
          image: "${AIRFLOW_IMAGE}"
          imagePullPolicy: IfNotPresent
          ports:
            - name: webserver
              containerPort: 8080
          args: ["webserver"]
          volumeMounts:
            - name: airflow-configmap
              mountPath: /root/airflow/airflow.cfg
              subPath: airflow.cfg
            - name: airflow-dags
              mountPath: /root/airflow/dags
            - name: airflow-logs
              mountPath: /root/airflow/logs
          env:
            # TODO: read conn str as a secret
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              value: "${AIRFLOW_METADB_CONN_STR}"
#            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
#              valueFrom:
#                secretKeyRef:
#                  name: airflow-secrets
#                  key: sql_alchemy_conn
        - name: scheduler
          image: "${AIRFLOW_IMAGE}"
          imagePullPolicy: IfNotPresent
          args: ["scheduler"]
          volumeMounts:
            - name: airflow-configmap
              mountPath: /root/airflow/airflow.cfg
              subPath: airflow.cfg
            - name: airflow-dags
              mountPath: /root/airflow/dags
            - name: airflow-logs
              mountPath: /root/airflow/logs
          env:
            # TODO: read conn str as a secret
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              value: "${AIRFLOW_METADB_CONN_STR}"
      volumes:
        - name: airflow-configmap
          configMap:
            name: airflow-configmap
        - name: airflow-dags
          persistentVolumeClaim:
            claimName: airflow-dags
        - name: airflow-logs
          persistentVolumeClaim:
            claimName: airflow-logs


---
apiVersion: v1
kind: Service
metadata:
  namespace: "${KUBERNETES_NAMESPACE}"
  name: airflow
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    name: airflow
